#!/bin/bash
# License: GPLv3

export DISPLAY=:0
NotifyPath="/usr/bin/notify-send"
locker="incomplete.backup"

#python2 -c 'import gtk; print gtk.icon_theme_get_default().lookup_icon("evolution", int('32'), ()).get_filename();'
#ICON_NOTIFY=$(python -c "from gi.repository import Gtk; print(Gtk.IconTheme.get_default().lookup_icon('emblem-synchronizing', 48, Gtk.IconLookupFlags.USE_BUILTIN).get_filename());")
#ICON_NOTIFY=/usr/share/icons/Adwaita/48x48/emblems/emblem-synchronizing.png

# choose a nice notification icon
if [[ "$userNotify" ]] ; then
	ICON_NOTIFY_RAW=$(su "$userNotify" -c "python3 -c 'from gi.repository import Gtk; print(Gtk.IconTheme.get_default().lookup_icon(\"emblem-synchronizing\", 48, Gtk.IconLookupFlags.USE_BUILTIN).get_filename());'")
	if [[ $ICON_NOTIFY_RAW ]] ; then
		ICON_NOTIFY="-i $ICON_NOTIFY_RAW"
	fi
	#echo "icon:" $ICON_NOTIFY
fi 


# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

# umount disk and luks
function umountDir {
	umount "$mountDir"
	cryptsetup luksClose /dev/mapper/"$mapperName"
}

# mount disk with luks
function mountCrypt {
	cryptsetup luksOpen $devUUID --key-file="$cryptKeyFile" "$mapperName"
	fsck /dev/mapper/"$mapperName" -y
}

# mounts the container
function mountContainer {
	mkdir -p "$mountDir"

	type=$(sudo blkid /dev/mapper/"$mapperName" | awk ' { print $(NF) } ' | cut -d '"' -f 2 )
	echo "Filesys to check: $type"

	if [ "$type" == "ext4" ] ; then
		mount -o noatime,data=writeback,errors=continue /dev/mapper/"$mapperName" "$mountDir"
	elif [ "$type" == "btrfs" ] ; then
		mount -o noatime,ro,fatal_errors=bug /dev/mapper/"$mapperName" "$mountDir"
	elif [ "$type" == "xfs" ] ; then
		mount /dev/mapper/"$mapperName" "$mountDir"
	fi
}

function help {
cat <<EOF
Usage: $0 [options]

-h		this help text
-r		remounts the luks container
-u 		umounts the luks container
-m 		mounts the luks container without rsync
-k 		do not roate, sync to the newest existing folder
-l 		lock the backup (will remove locked backup = incomplete backups)
-c 		cron option (ignores error for non-available device)
EOF
}

while getopts "ruchkm" opt; do
  case $opt in
    r)
      echo "remounting $mountDir" >&2
	  umountDir
	  ;;
	u)
	  echo "umounting $mountDir" >&2
	  umountDir
	  exit 0
      ;;
	m)
	  echo "mounting $mountDir" >&2
	  umountDir
	  mountCrypt
	  mountContainer
	  exit 0
	  ;;
	k)
	  echo "SYNC MODE" 
	  NO_ROTATE=1
	  ;;
	c)
	  echo "CRON MODE" 
	  CRON=1
	  ;;
	l)
	  echo "LOCK MODE (will remove old, locked backups)" 
	  LOCKED=1
	  ;;
	h)
	  help
	  exit 0
	  ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      help
      exit 1
      ;;
  esac
done

# for device
if [ ! -e $devUUID ] ; then
	echo "device not plugged in"
	# exit softly for the cron
	if [[ $CRON ]] ; then
		exit 0
	else 
		exit 1
	fi
fi

# mount disk with luks
if [ ! -e /dev/mapper/"$mapperName" ] ; then
	mountCrypt
fi


# mount the mapper somewhere
if [ ! -e "$syncDir" ] ; then
	mountContainer
fi

# check for read-only fs and input/output error
if  ! touch "$syncDir" ; then 
	echo "mount error $syncDir"
	echo "trying to remount"

	# remount
	umountDir
	mountCrypt
	mountContainer
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# set exclude file if empty
if [[ -z EXCLUDE_FROM_FILE ]] ; then
	EXCLUDE_FROM_FILE="$DIR/exclude.rsync"
fi


notify(){
	if [[ "$userNotify" ]] ; then
		# we know the user to be notified
		su "$userNotify" -c "$NotifyPath -u normal '$1' '$2' -t '$3' $4 $5"
	else
		# hope for the best
		"$NotifyPath -u normal '$1' '$2' -t '$3' $NOTIFY_ICON"
	fi
}

# run rsync
if [ -d "$syncDir" ] ; then
	echo "" > "$logName"

	# checking for incomplete backups
	if [ -n $LOCKED ] ; then
		for file in $(ls -t "$syncDir" ) ; do 
			if [ -e "$syncDir/$file/$locker" ] ; then 
				echo "removing incomplete backup: $file"
				rm -rf "$syncDir/$file"
				echo "removed incomplete backup: $file"
			fi
		done
		$LOCKED_ARG="--filter='P $locker"
	fi

	if [[ $withHardLinks ]] && [[ -z $NO_ROTATE ]] ; then
		# rotate every month
		rotatePattern=`date +"%Y-%m"`
		if ! [[ $(ls "$syncDir" | grep "$rotatePattern" ) ]] ; then 
			echo "$rotatePattern not found"
			echo "rotating hard disk"
		else
			# pick the latest dir to symlink
			linkDestDir=$(ls -t "$syncDir" | head -n 1)
			HARDLINKS="--link-dest $syncDir/$linkDestDir"
			echo "Hardlink_parent: $linkDestDir"
		fi
	fi

	# no rotate flag (using newest folder to sync)
	if [[ $NO_ROTATE ]] ; then
		bakFolder=$(ls -t "$syncDir" | head -n 1)
		echo "Sync to: $bakFolder"
	fi

	syncDirFull="$syncDir/$bakFolder"
	mkdir -p "$syncDirFull"

	# lock the backup as incomplete
	if [ -n $LOCKED ] ; then
		touch "$syncDirFull/$locker"
	fi

	echo "Running rsync. DO NOT KILL"

	# run without compression
	# run without partial
	/usr/bin/ionice -c 3 /usr/bin/nice -19 /usr/bin/rsync --archive --times  \
	--links --perms -v --delete --quiet --log-file "$logName" --stats  \
	$HARDLINKS $LOCKED_ARG \
	--exclude-from "$EXCLUDE_FROM_FILE" --delete-excluded "$bakDir" $syncDirFull; 

	# print stats
	tail -n 30 "$logName" | grep -A 30 "Number of files"

	#### BEGIN: do cleanup stuff ##############

	# restore mount points
	if [[ "$bakDir" == "/" ]] ; then
		find /mnt -mount -printf '%P\n' | xargs -I {} mkdir -p "$syncDirFull/mnt/{}"
	fi


	# unlock the backup (=complete)
	if [ -n $LOCKED ] ; then
		echo "removing lock from $syncDirFull/$locker"
		rm "$syncDirFull/$locker"
	fi

	#### END: cleanup ######################

	notify "Backup complete" "$mapperName" 8000 "$ICON_NOTIFY"
else
	echo "Mount point not available"
	exit 1
fi
